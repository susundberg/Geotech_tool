#ifndef MESSAGES_HH
#define MESSAGES_HH

const static unsigned char msg_speedup_write_000[] = { 0x23 ,0x23 ,0xf0 ,0x2a ,0xf0 ,0x0d ,0x0a };
const static unsigned char msg_speedup_resp_000[]  = { 0x23 ,0x23 ,0xa0 ,0x2a ,0xa0 ,0x0d ,0x0a };
const static unsigned char msg_speedup_write_001[] = { 0x23 ,0x23 ,0xf5 ,0x2a ,0xf5 ,0x0d ,0x0a };
const static unsigned char msg_speedup_resp_001[]  = { 0x23 ,0x23 ,0xa5 ,0x10 ,0x2a ,0xb5 ,0x0d ,0x0a };


const static unsigned char msg_sample_query[]      = { 0x23 ,0x23 ,0xf9 ,0x2a ,0xf9 ,0x0d ,0x0a };
const static unsigned char msg_sample_query_resp[] = { 0x23 ,0x23 ,0xa9 ,0x00 ,0x00 ,0x2c ,0x31 ,0x2a ,0x6b ,0x0d ,0x0a };
          // RESP for 32:  ,0x23 ,0x23 ,0xa9 ,0x33 ,0x32 ,0x2c ,0x31 ,0x2a ,0x6b ,0x0d ,0x0a
          // RESP for 40:  ,0x23 ,0x23 ,0xa9 ,0x34 ,0x30 ,0x2c ,0x31 ,0x2a ,0x6a ,0x0d ,0x0a
          // RESP for 14:  ,0x23 ,0x23 ,0xa9 ,0x31 ,0x34 ,0x2c ,0x31 ,0x2a ,0x6b ,0x0d ,0x0a
         // RESP for 05:   23  23  a9  35  2c  31  2a  3b  d  a
const static unsigned char msg_reset[]       = { 0x23 ,0x23 ,0xf1 ,0x2a ,0xf1 ,0x0d ,0x0a };
const static unsigned char msg_reset_resp[]  = { 0x23 ,0x23 ,0xa1 ,0x2a ,0xa1 ,0x0d ,0x0a };
 
const static unsigned char msg_sample_set[]        = { 0x23 ,0x23 ,0xf8 ,0x00 ,0x00 ,0x2c ,0x31 ,0x2a ,0xb9 ,0x0d ,0x0a  };
        // SET 40                   ,0x23 ,0x23 ,0xf8 ,0x34 ,0x30 ,0x2c ,0x31 ,0x2a ,0xb9 ,0x0d ,0x0a 
        // SET 14                   ,0x23 ,0x23 ,0xf8 ,0x31 ,0x34 ,0x2c ,0x31 ,0x2a ,0xba ,0x0d ,0x0a
        // SET 32                   ,0x23 ,0x23 ,0xf8 ,0x33 ,0x32 ,0x2c ,0x31 ,0x2a ,0xba ,0x0d ,0x0a
const static unsigned char msg_sample_set_resp[]    = { 0x23, 0x23, 0xa8, 0x2a, 0xa8, 0x0d, 0x0a };

const static unsigned char msg_clear_samples[]      = { 0x23, 0x23, 0xfa, 0x2a, 0xfa, 0x0d, 0x0a };
const static unsigned char msg_clear_samples_resp[] = { 0x23, 0x23, 0xaa, 0x2a, 0xaa, 0x0d, 0x0a };

const static unsigned char msg_download_start[]     = { 0x23, 0x23, 0xf6, 0x2a, 0xf6, 0x0d, 0x0a };
const static unsigned char msg_download_resp_yes[]  = { 0x23, 0x23, 0xa6, 0x30, 0x2c, 0x30, 0x2a, 0x32, 0x0d, 0x0a };
       // RESP1 : , 0x23, 0x23, 0xa6, 0x31, 0x30, 0x39, 0x30, 0x2c, 0x31, 0x30, 0x39, 0x31, 0x2a, 0x67, 0x0d, 0x0a
       //                               1     0     9     0    ,     1     0     9     1     *     C
       // RESP2 : , 0x23, 0x23, 0xa6, 0x37, 0x2c, 0x38, 0x2a, 0x41, 0x0d, 0x0a
       //                               7     ,    8      *    )
       // RESP3 : , 0x23, 0x23, 0xa6, 0x38, 0x30, 0x2c, 0x38, 0x31, 0x2a, 0xa3, 0x0d, 0x0a
       //                               8     0     ,    8     1     *     
       // RESP0 : , 0x23, 0x23, 0xa6, 0x30, 0x2c, 0x30, 0x2a, 0x32, 0x0d, 0x0a
       //                              0      ,    0     *     2 


// 
const static unsigned char msg_download_entry[]     = { 0x23, 0x23, 0xf7, 0x30, 0x2a, 0x27, 0x0d, 0x0a };
// MSG 00:  , 0x23, 0x23, 0xf7, 0x30, 0x2a, 0x27, 0x0d, 0x0a
//                                 0   *   
// MSG 01:  , 0x23, 0x23, 0xf7, 0x31, 0x2a, 0x28, 0x0d, 0x0a
// MSG 02:  , 0x23, 0x23, 0xf7, 0x32, 0x2a, 0x29, 0x0d, 0x0a
//..
// MSG N-1: , 0x23, 0x23, 0xf7, 0x37, 0x38, 0x2a, 0x66, 0x0d, 0x0a
// MSG N  : , 0x23, 0x23, 0xf7, 0x37, 0x39, 0x2a, 0x67, 0x0d, 0x0a
//                        7   9   *   
// THE message is: 0x23, 0x23, 0xf7, <ascii index entry> 0x2a <check item> 0x0d, 0x0a
// g = ( mod(i,10) + 39 ) + (i >= 10).*(49 + floor(mod(i,100)/10) - 1) + ( i>= 100).*(49 + floor(mod(i,1000)/100) - 1) + (i>=1000).*(49 + floor(i/1000) - 1)

#define DOWNLOAD_GET_CHECK(x) ( (x%10) + 39 ) + (x >= 10)*(49 + (x%100)/10 - 1) + (x >= 100)*( 49 + (x%1000)/100 - 1) + (x >= 1000)*( 49 + (x%10000)/1000 - 1)

/// 0-2   : HEADER
/// 3-6   : LONGITUDE encoded in 0.000001 * B0 + 0.000002 * B1 + ... 10^-6
/// 7-10  : LATITUDE
///   11  : HEIGH -- 0-255
///   12  : HEIGH -- 256 - >

/// 13    : ??? 
/// 14    : ???

/// 15    : Seconds, 64=1min,128=2min
/// 16    : Minutes, 1=4min,2=8min,3=12min,4=16min,5=20min, 16=1h, 17=1h 4min, 32=2h, 64=4h,128=8h
/// 17    : 1 = 16h, 2=1d , 4=2d , 8=4d , 16=8d, 32=16d,  64=1m, 128=2m
/// 18    : 1 = 4m , 2=8m , 4=1y,  8=2y , 16=4y, 32=8y ,  64=16y, 128=32y , years since 2000

/// 19    : Checksum

/// MSG responce 23 23 a7 10 02 7e 01 7c aa 96 03 27 00 20 4e af b9 02 31 27







#endif